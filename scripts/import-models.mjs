#!/usr/bin/env node
/**
 * Orchestrator V3 ‚Äî Hugging Face Models Importer
 * 
 * –°–∫–∞—á–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª–∏ –≤ F:\Models:
 * - SDXL Base 1.0
 * - SD 3.5 Medium (—Ç—Ä–µ–±—É–µ—Ç Agree)
 * - ControlNet Depth SDXL
 * - IP-Adapter SDXL
 * - SVD 1.1 (—Ç—Ä–µ–±—É–µ—Ç Agree)
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç HF_TOKEN –∏–∑ .env.local
 * –ö—ç—à: F:\Cache\HF (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è HF_HOME)
 */

import { readFile, writeFile, mkdir } from 'fs/promises';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
import { execSync } from 'child_process';
import { config } from 'dotenv';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const PROJECT_ROOT = join(__dirname, '..');

// Load .env.local explicitly
config({ path: join(PROJECT_ROOT, '.env.local') });

const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  red: '\x1b[31m',
  cyan: '\x1b[36m',
  dim: '\x1b[2m'
};

function log(msg, color = 'reset') {
  console.log(`${colors[color]}${msg}${colors.reset}`);
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ paths.json
 */
async function loadPaths() {
  const pathsFile = join(PROJECT_ROOT, 'paths.json');
  const content = await readFile(pathsFile, 'utf-8');
  return JSON.parse(content);
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ HF_TOKEN
 */
function checkHFToken() {
  const token = process.env.HF_TOKEN;
  if (!token) {
    log('‚ùå HF_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env.local', 'red');
    log('–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω: https://huggingface.co/settings/tokens', 'cyan');
    process.exit(1);
  }
  return token;
}

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ HF_HOME (cache directory)
 */
function setHFCache(hfCache) {
  process.env.HF_HOME = hfCache;
  log(`üì¶ HF_HOME —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${hfCache}`, 'dim');
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏ –Ω–∞ HF
 */
async function checkLicenseAgreed(repoId, token) {
  try {
    const response = await fetch(`https://huggingface.co/api/models/${repoId}`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    
    if (response.status === 403) {
      log(`‚ö†Ô∏è  –ú–æ–¥–µ–ª—å ${repoId} —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏!`, 'yellow');
      log(`   –û—Ç–∫—Ä–æ–π—Ç–µ: https://huggingface.co/${repoId}`, 'cyan');
      log(`   –ù–∞–∂–º–∏—Ç–µ: "Agree and access repository"`, 'cyan');
      return false;
    }
    
    return response.ok;
  } catch {
    return false;
  }
}

/**
 * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è HF —á–µ—Ä–µ–∑ git clone
 */
async function downloadHFRepo(repoId, targetDir, token) {
  const repoUrl = `https://huggingface.co/${repoId}`;
  const authedUrl = `https://user:${token}@huggingface.co/${repoId}`;
  
  log(`üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ ${repoId}...`, 'cyan');
  
  try {
    await mkdir(targetDir, { recursive: true });
    
    // Git clone —Å LFS
    execSync(
      `git clone ${authedUrl} "${targetDir}"`,
      { 
        stdio: 'inherit',
        env: { 
          ...process.env,
          GIT_LFS_SKIP_SMUDGE: '0' // –°–∫–∞—á–∏–≤–∞—Ç—å LFS —Ñ–∞–π–ª—ã
        }
      }
    );
    
    log(`‚úÖ ${repoId} —Å–∫–∞—á–∞–Ω –≤ ${targetDir}`, 'green');
    return true;
  } catch (err) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ ${repoId}: ${err.message}`, 'red');
    return false;
  }
}

/**
 * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ HF API
 */
async function downloadFile(repoId, filename, outputPath, token) {
  const url = `https://huggingface.co/${repoId}/resolve/main/${filename}`;
  
  log(`üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ ${filename}...`, 'dim');
  
  try {
    const response = await fetch(url, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    
    if (!response.ok) {
      log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å ${filename}: ${response.status}`, 'red');
      return false;
    }
    
    const buffer = await response.arrayBuffer();
    
    await mkdir(dirname(outputPath), { recursive: true });
    await writeFile(outputPath, Buffer.from(buffer));
    
    log(`‚úÖ ${filename} —Å–æ—Ö—Ä–∞–Ω—ë–Ω`, 'green');
    return true;
  } catch (err) {
    log(`‚ùå –û—à–∏–±–∫–∞: ${err.message}`, 'red');
    return false;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∏–º–ø–æ—Ä—Ç–∞
 */
async function main() {
  log('\nüöÄ Orchestrator V3 ‚Äî –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π –∏–∑ HuggingFace\n', 'cyan');
  
  const paths = await loadPaths();
  const token = checkHFToken();
  setHFCache(paths.hfCache);
  
  const modelsRoot = paths.modelsRoot;
  
  log('üìã –ü–ª–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏:', 'cyan');
  log('  1. SDXL Base 1.0 ‚Üí checkpoints/', 'dim');
  log('  2. SD 3.5 Medium ‚Üí checkpoints/', 'dim');
  log('  3. ControlNet Depth SDXL ‚Üí controlnet/', 'dim');
  log('  4. IP-Adapter SDXL ‚Üí ipadapter/', 'dim');
  log('  5. SVD 1.1 ‚Üí video/', 'dim');
  log('');
  
  // 1. SDXL Base 1.0
  log('‚ïê'.repeat(60), 'dim');
  log('1/5 SDXL Base 1.0', 'cyan');
  await downloadFile(
    'stabilityai/stable-diffusion-xl-base-1.0',
    'sd_xl_base_1.0.safetensors',
    join(modelsRoot, 'checkpoints', 'sd_xl_base_1.0.safetensors'),
    token
  );
  
  // 2. SD 3.5 Medium
  log('\n' + '‚ïê'.repeat(60), 'dim');
  log('2/5 SD 3.5 Medium', 'cyan');
  
  const sd35Agreed = await checkLicenseAgreed('stabilityai/stable-diffusion-3.5-medium', token);
  if (!sd35Agreed) {
    log('‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—é SD 3.5 Medium (—Ç—Ä–µ–±—É–µ—Ç—Å—è Agree)', 'yellow');
  } else {
    await downloadFile(
      'stabilityai/stable-diffusion-3.5-medium',
      'sd3.5_medium.safetensors',
      join(modelsRoot, 'checkpoints', 'sd3.5_medium.safetensors'),
      token
    );
  }
  
  // 3. ControlNet Depth SDXL
  log('\n' + '‚ïê'.repeat(60), 'dim');
  log('3/5 ControlNet Depth SDXL', 'cyan');
  await downloadFile(
    'diffusers/controlnet-depth-sdxl-1.0',
    'diffusion_pytorch_model.safetensors',
    join(modelsRoot, 'controlnet', 'controlnet-depth-sdxl-1.0.safetensors'),
    token
  );
  
  // 4. IP-Adapter SDXL
  log('\n' + '‚ïê'.repeat(60), 'dim');
  log('4/5 IP-Adapter SDXL', 'cyan');
  await downloadHFRepo(
    'h94/IP-Adapter',
    join(modelsRoot, 'ipadapter', 'IP-Adapter'),
    token
  );
  
  // 5. SVD 1.1
  log('\n' + '‚ïê'.repeat(60), 'dim');
  log('5/5 SVD 1.1 (Stable Video Diffusion)', 'cyan');
  
  const svdAgreed = await checkLicenseAgreed('stabilityai/stable-video-diffusion-img2vid-xt-1-1', token);
  if (!svdAgreed) {
    log('‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—é SVD 1.1 (—Ç—Ä–µ–±—É–µ—Ç—Å—è Agree)', 'yellow');
  } else {
    await downloadHFRepo(
      'stabilityai/stable-video-diffusion-img2vid-xt-1-1',
      join(modelsRoot, 'video', 'svd-1.1'),
      token
    );
  }
  
  log('\n' + '‚ïê'.repeat(60), 'dim');
  log('‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!', 'green');
  log(`üìÅ –ú–æ–¥–µ–ª–∏ –≤: ${modelsRoot}`, 'cyan');
  log('\n–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ F:\\ComfyUI\\extra_model_paths.yaml', 'yellow');
  log('–°–º. SETUP-GUIDE.md', 'dim');
  log('‚ïê'.repeat(60) + '\n', 'dim');
}

main().catch(err => {
  log(`\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${err.message}`, 'red');
  console.error(err);
  process.exit(1);
});
