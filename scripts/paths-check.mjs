#!/usr/bin/env node
/**
 * Orchestrator V3 ‚Äî Paths Validation Script
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
 * - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –ø—É—Ç–µ–π –∏–∑ paths.json
 * - –ü—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ/–∑–∞–ø–∏—Å—å
 * - –°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–∞—Ö C: –∏ F:
 * - –°–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞: –º–æ–¥–µ–ª–∏/–∫—ç—à —Ç–æ–ª—å–∫–æ –Ω–∞ F:, –ø—Ä–æ–µ–∫—Ç –Ω–∞ C:
 */

import { readFile, access, mkdir, writeFile, unlink, constants } from 'fs/promises';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import { execSync } from 'child_process';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const PROJECT_ROOT = join(__dirname, '..');

// –¶–≤–µ—Ç–∞ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  red: '\x1b[31m',
  cyan: '\x1b[36m',
  dim: '\x1b[2m'
};

function log(msg, color = 'reset') {
  console.log(`${colors[color]}${msg}${colors.reset}`);
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ paths.json
 */
async function loadPaths() {
  try {
    const pathsFile = join(PROJECT_ROOT, 'paths.json');
    const content = await readFile(pathsFile, 'utf-8');
    return JSON.parse(content);
  } catch (err) {
    log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è paths.json: ${err.message}`, 'red');
    process.exit(1);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
 */
async function checkPathAccess(path, name) {
  try {
    await access(path, constants.F_OK);
    log(`  ‚úÖ ${name}: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`, 'green');
    return true;
  } catch {
    log(`  ‚ö†Ô∏è  ${name}: –Ω–µ –Ω–∞–π–¥–µ–Ω (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)`, 'yellow');
    return false;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ/–∑–∞–ø–∏—Å—å
 */
async function checkReadWrite(path, name) {
  const testFile = join(path, `.test-${Date.now()}.tmp`);
  
  try {
    // –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ—Ç
    await mkdir(path, { recursive: true });
    
    // –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏
    await writeFile(testFile, 'test');
    
    // –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è
    await readFile(testFile);
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    await unlink(testFile);
    
    log(`  ‚úÖ ${name}: –¥–æ—Å—Ç—É–ø R/W`, 'green');
    return true;
  } catch (err) {
    log(`  ‚ùå ${name}: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ R/W ‚Äî ${err.message}`, 'red');
    return false;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ (Windows)
 */
function getDiskSpace(driveLetter) {
  try {
    const output = execSync(
      `powershell "Get-PSDrive -Name ${driveLetter} | Select-Object -ExpandProperty Free"`,
      { encoding: 'utf-8' }
    );
    const bytes = parseInt(output.trim());
    const gb = (bytes / 1024 / 1024 / 1024).toFixed(2);
    return { bytes, gb };
  } catch (err) {
    log(`  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–µ ${driveLetter}:`, 'red');
    return { bytes: 0, gb: '0.00' };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª–∞: –º–æ–¥–µ–ª–∏/–∫—ç—à –Ω–∞ F:, –ø—Ä–æ–µ–∫—Ç –Ω–∞ C:
 */
function validatePathRules(paths) {
  log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:', 'cyan');
  
  let valid = true;
  
  // –ú–æ–¥–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ F:
  if (!paths.modelsRoot.startsWith('F:\\')) {
    log(`  ‚ùå modelsRoot –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ F:\\ (—Å–µ–π—á–∞—Å: ${paths.modelsRoot})`, 'red');
    valid = false;
  } else {
    log(`  ‚úÖ modelsRoot –Ω–∞ F:\\`, 'green');
  }
  
  // HF –∫—ç—à –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ F:
  if (!paths.hfCache.startsWith('F:\\')) {
    log(`  ‚ùå hfCache –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ F:\\ (—Å–µ–π—á–∞—Å: ${paths.hfCache})`, 'red');
    valid = false;
  } else {
    log(`  ‚úÖ hfCache –Ω–∞ F:\\`, 'green');
  }
  
  // ComfyUI –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞ F:
  if (!paths.comfyRoot.startsWith('F:\\')) {
    log(`  ‚ö†Ô∏è  comfyRoot —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞ F:\\ (—Å–µ–π—á–∞—Å: ${paths.comfyRoot})`, 'yellow');
  } else {
    log(`  ‚úÖ comfyRoot –Ω–∞ F:\\`, 'green');
  }
  
  // –ü—Ä–æ–µ–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ C:
  if (!paths.projectRoot.startsWith('C:\\')) {
    log(`  ‚ùå projectRoot –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ C:\\ (—Å–µ–π—á–∞—Å: ${paths.projectRoot})`, 'red');
    valid = false;
  } else {
    log(`  ‚úÖ projectRoot –Ω–∞ C:\\`, 'green');
  }
  
  return valid;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
async function main() {
  log('\nüîç Orchestrator V3 ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π\n', 'cyan');
  
  const paths = await loadPaths();
  
  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—É—Ç–µ–π
  log('üìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:', 'cyan');
  for (const [key, path] of Object.entries(paths)) {
    await checkPathAccess(path, key);
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ R/W
  log('\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (R/W):', 'cyan');
  const accessResults = [];
  for (const [key, path] of Object.entries(paths)) {
    const hasAccess = await checkReadWrite(path, key);
    accessResults.push(hasAccess);
  }
  
  // 3. –°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–∞—Ö
  log('\nüíæ –°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–∞—Ö:', 'cyan');
  const cDisk = getDiskSpace('C');
  const fDisk = getDiskSpace('F');
  
  log(`  C:\\ ‚Äî ${cDisk.gb} GB —Å–≤–æ–±–æ–¥–Ω–æ`, cDisk.bytes > 10 * 1024 * 1024 * 1024 ? 'green' : 'yellow');
  log(`  F:\\ ‚Äî ${fDisk.gb} GB —Å–≤–æ–±–æ–¥–Ω–æ`, fDisk.bytes > 100 * 1024 * 1024 * 1024 ? 'green' : 'yellow');
  
  if (fDisk.bytes < 50 * 1024 * 1024 * 1024) {
    log('  ‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 50 GB –Ω–∞ F:\\ –¥–ª—è –º–æ–¥–µ–ª–µ–π', 'yellow');
  }
  
  // 4. –ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
  const rulesValid = validatePathRules(paths);
  
  // –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
  log('\n' + '='.repeat(60), 'dim');
  const allAccessible = accessResults.every(r => r);
  
  if (allAccessible && rulesValid) {
    log('‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!', 'green');
    log('üé® Orchestrator V3 –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ', 'cyan');
  } else {
    log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç–∏ –≤ paths.json', 'red');
    process.exit(1);
  }
  
  log('='.repeat(60) + '\n', 'dim');
}

main().catch(err => {
  log(`\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${err.message}`, 'red');
  console.error(err);
  process.exit(1);
});
