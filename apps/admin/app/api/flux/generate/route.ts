/**
 * –ü—Ä–æ–∫—Å–∏ –¥–ª—è FLUX API /flux-pro-1.1-ultra
 * –í–ê–ñ–ù–û: –ø–ª–∞—Ç–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç, —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¢–û–õ–¨–ö–û –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
 * –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ª–æ–≥–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å lib/flux-client.ts –Ω–∞–ø—Ä—è–º—É—é.
 * 
 * –†–ï–ñ–ò–ú–´:
 * 1. Dry-run (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é): –í–∞–ª–∏–¥–∞—Ü–∏—è payload –±–µ–∑ –≤—ã–∑–æ–≤–∞ API
 * 2. Confirmed: –†–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ API (—Ç—Ä–µ–±—É–µ—Ç ALLOW_GENERATION=true + confirmed=true)
 */

import { NextRequest, NextResponse } from 'next/server'
import { generateFlux } from '@/lib/flux-client'
import { logger } from '@/lib/logger'
import { env } from '@/lib/env'

export const runtime = 'nodejs'
export const revalidate = 0

// –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Ü–µ–Ω–∞ FLUX 1.1 Pro Ultra
const ESTIMATED_COST_USD = 0.04

export async function POST(request: Request) {
  try {
    const body = await request.json()
    const { confirmed = false } = body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!body.prompt) {
      return Response.json(
        { error: '–ü–æ–ª–µ prompt –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' },
        { status: 400 }
      )
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è payload structure (–ø–µ—Ä–µ–¥ —Å–±–æ—Ä–∫–æ–π –∫–æ–Ω—Ñ–∏–≥–∞)
    const config = {
      prompt: body.prompt,
      width: body.width || undefined,
      height: body.height || undefined,
      seed: body.seed || undefined,
      raw: body.raw || undefined,
      aspect_ratio: body.aspect_ratio || undefined,
      image_prompt: body.image_prompt || undefined,
      image_prompt_strength: body.image_prompt_strength || undefined,
      output_format: body.output_format || undefined,
    }

    // DRY-RUN MODE: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –±–µ–∑ –≤—ã–∑–æ–≤–∞ API
    const allowGeneration = env.ALLOW_GENERATION === 'true' && confirmed === true

    if (!allowGeneration) {
      logger.info({
        message: 'FLUX dry-run validation',
        prompt: body.prompt?.slice(0, 50) + '...',
        confirmed,
        allowFlag: env.ALLOW_GENERATION
      })

      return Response.json({
        dryRun: true,
        valid: true,
        payload: config,
        estimatedCost: `$${ESTIMATED_COST_USD}`,
        message: confirmed 
          ? 'ALLOW_GENERATION=false. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ALLOW_GENERATION=true –≤ .env –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.'
          : 'Payload –≤–∞–ª–∏–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ confirmed=true –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.',
        note: '–≠—Ç–æ dry-run —Ä–µ–∂–∏–º ‚Äî API –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –¥–µ–Ω—å–≥–∏ –Ω–µ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è.'
      })
    }

    // REAL GENERATION: –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ ALLOW_GENERATION=true –ò confirmed=true
    logger.warn({
      message: 'üí∏ FLUX real generation',
      prompt: body.prompt?.slice(0, 50) + '...',
      estimatedCost: ESTIMATED_COST_USD
    })

    const data = await generateFlux(config)

    return Response.json(data)
    
  } catch (error: any) {
    logger.error({
      message: 'FLUX proxy /generate error',
      error: error.message,
      stack: error.stack
    })
    return Response.json(
      { error: `–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ FLUX: ${error.message}` },
      { status: 500 }
    )
  }
}
